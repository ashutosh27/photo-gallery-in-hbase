<?xml version="1.0"?>

<project name="Hadoop" default="sample">

	<!-- Load all the default properties, and any the user wants    -->
	<!-- to contribute (without having to type -D or edit this file -->
	<property file="${user.home}/build.properties" />
	<property file="${basedir}/build.properties" />
	<property name="final.name" value="${name}-${version}" />

	<property name="src.dir" value="${basedir}/src" />
	<property name="conf.dir" value="${hbase.home}/conf" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="dist.dir" value="${build.dir}/${final.name}" />

	<property name="javac.debug" value="on" />
	<property name="javac.optimize" value="on" />
	<property name="javac.deprecation" value="off" />
	<property name="javac.version" value="1.6" />
	<property name="javac.args" value="" />
	<property name="javac.args.warnings" value="-Xlint:unchecked" />

	<!-- the normal classpath -->
	<path id="classpath">
		<pathelement location="${build.dir}" />
		<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/excluded/" />
		<fileset dir="${hbase.home}" includes="*.jar" />
		<pathelement location="${conf.dir}" />
	</path>

	<path id="classpath.run">
		<fileset file="${final.name}.jar" />
		<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/excluded/" />
		<fileset dir="${hbase.home}" includes="*.jar" />
		<pathelement location="${conf.dir}" />
	</path>
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${build.dir}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<!-- ================================================================== -->
	<!-- Make the Hadoop sample jar.                                      -->
	<!-- ================================================================== -->
	<!--                                                                    -->
	<!-- ================================================================== -->
	<target name="sample" depends="compile" description="Make the Hadoop examples jar.">
		<jar jarfile="${final.name}.jar" basedir="${build.dir}">
		</jar>
	</target>
	<!--
	<target name="run">
		<java classname="${mainClass}" fork="true" classpathref="classpath.run">
			<arg value="${cmd}" />
			<arg value="${inputTableName}" />
			<arg value="${outputdir}" />
		</java>
	</target>
-->
	<target name="sampleUploader">
		<java classname="com.shopping.hbase.sample.mapreduce.SampleUploader" fork="true" classpathref="classpath.run">
			<arg value="${inputCSVFile}" />
			<arg value="${tableName}" />
		</java>
	</target>

	<target name="import">
		<java classname="com.shopping.hbase.sample.mapreduce.Import" fork="true" classpathref="classpath.run">
			<arg value="${imageFilesFolder}" />
			<arg value="${sequenceFilesFolder}" />
			<arg value="${imageTableName}" />
		</java>
	</target>

	<target name="export">
		<java classname="com.shopping.hbase.sample.mapreduce.Export" fork="true" classpathref="classpath.run">
			<arg value="${imageTableName}" />
			<arg value="${file}"/>
		</java>
	</target>



	<target name="check-for-findbugs">
		<available property="findbugs.present" file="${findbugs.home}/lib/findbugs.jar" />
	</target>


	<target name="forrest.check" unless="forrest.home" depends="java5.check">
		<fail message="'forrest.home' is not defined. Please pass -Dforrest.home=&lt;base of Apache Forrest installation&gt; to Ant on the command-line." />
	</target>

	<target name="java5.check" unless="java5.home">
		<fail message="'java5.home' is not defined.  Forrest requires Java 5.  Please pass -Djava5.home=&lt;base of Java 5 distribution&gt; to Ant on the command-line." />
	</target>


	<target name="write-null">
		<exec executable="touch">
			<arg value="${jdiff.home}/Null.java" />
		</exec>
	</target>


	<target name="clover" depends="clover.setup, clover.info" description="Instrument the Unit tests using Clover.  To use, specify -Dclover.home=&lt;base of clover installation&gt; -Drun.clover=true on the command line." />

	<target name="clover.setup" if="clover.enabled">
		<taskdef resource="cloverlib.xml" classpath="${clover.jar}" />
		<mkdir dir="${clover.db.dir}" />
		<clover-setup initString="${clover.db.dir}/hadoop_coverage.db">
			<fileset dir="src" includes="core/**/* tools/**/* hdfs/**/* mapred/**/*" />
		</clover-setup>
	</target>

	<target name="clover.info" unless="clover.present">
		<echo>
     Clover not found. Code coverage reports disabled.
  </echo>
	</target>

	<target name="clover.check">
		<fail unless="clover.present">
  ##################################################################
   Clover not found.
   Please specify -Dclover.home=&lt;base of clover installation&gt;
   on the command line.
  ##################################################################
  </fail>
	</target>

	<target name="generate-clover-reports" depends="clover.check, clover">
		<mkdir dir="${clover.report.dir}" />
		<clover-report>
			<current outfile="${clover.report.dir}" title="${final.name}">
				<format type="html" />
			</current>
		</clover-report>
		<clover-report>
			<current outfile="${clover.report.dir}/clover.xml" title="${final.name}">
				<format type="xml" />
			</current>
		</clover-report>
	</target>

</project>
